#include<iostream>
#include<memory>
#include<tuple>
#include<fstream>
using namespace std;
#pragma warning(disable:4996)

const char *crt = "\n-------------------------------------------\n";

enum vrstaDokumenta { PDF, DOC, TXT, HTML };
const char * vrstaDokumentaChar[] = { "PDF", "DOC", "TXT", "HTML" };

enum Prioritet { VISOK, SREDNJI, NIZAK };
const char * PrioritetChar[] = { "VISOK", "SREDNJI", "NIZAK" };

char * AlocirajNizKaraktera(const char * sadrzaj) {
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

const int BROJ_ZNAKOVA_PO_STRANICI = 30;

struct DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
	void Unos(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 1, int minuti = 1) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}
	void Dealociraj() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	void Ispis() {
		cout << *_dan << "." << *_mjesec << "." << *_godina << " " << *_sati << ":" << *_minuti << endl;
	}
	int PretvoriDane() {
		return *_dan + *_mjesec * 30 + *_godina * 365;
	}
};

struct Filter {
	char * _sadrzaj;
	Prioritet _prioritet;
	void Unos(const char * sadrzaj, Prioritet prioritet) {
		_sadrzaj = AlocirajNizKaraktera(sadrzaj);
		_prioritet = prioritet;
	}
	void Dealociraj() {
		delete[] _sadrzaj; _sadrzaj = nullptr;
	}
	void Ispis() { cout << _sadrzaj << " (" << PrioritetChar[_prioritet] << ")" << endl; }
};

struct Dokument {
	vrstaDokumenta _vrsta;
	char * _naziv;
	char * _sadrzaj;
	unique_ptr<DatumVrijeme> _kreiran;
	int _brojStranica;

	void Unos(vrstaDokumenta vrsta, const char * naziv, DatumVrijeme kreiran) {
		_naziv = AlocirajNizKaraktera(naziv);
		_vrsta = vrsta;
		_kreiran = make_unique<DatumVrijeme>(kreiran);
		_brojStranica = 0;
		_sadrzaj = nullptr;
	}
	void DodajSadrzaj(const char *sadrzaj) {
		if (_sadrzaj == nullptr) {
			_sadrzaj = AlocirajNizKaraktera(sadrzaj);
		}
		else {
			int size = strlen(_sadrzaj) + strlen(sadrzaj) + 1;
			char *temp = new char[size];
			strcpy_s(temp, size, _sadrzaj);
			strcat_s(temp, size, sadrzaj);
			delete[]_sadrzaj;
			_sadrzaj = temp;
		}
		_brojStranica = strlen(_sadrzaj) / BROJ_ZNAKOVA_PO_STRANICI;
	}
	void Dealociraj() {

		delete[] _naziv; _naziv = nullptr;
		if (_sadrzaj != nullptr) {
			delete[] _sadrzaj; _sadrzaj = nullptr;
		}
		_kreiran->Dealociraj();
	}
	void Ispis() {
		cout << crt << _naziv << " " << vrstaDokumentaChar[_vrsta] << " kreiran ";
		_kreiran->Ispis();
		cout << crt << _sadrzaj << crt << " br.stranica (" << _brojStranica << ")" << crt;
	}
};
struct Printer {
	char * _model;
	Dokument * _dokumenti;
	int _trenutnoDokumenata;
	Filter * _filteri;
	int _trenutnoFiltera;

	void Unos(const char * model) {
		_model = AlocirajNizKaraktera(model);
		_filteri = nullptr;
		_dokumenti = nullptr;
		_trenutnoDokumenata = 0;
		_trenutnoFiltera = 0;
	}
	bool DodajFilter(const char*sadrzaj, Prioritet prioritet) {
		for (int i = 0; i < _trenutnoFiltera; i++)
			if (_filteri[i]._sadrzaj != nullptr && strstr(_filteri[i]._sadrzaj, sadrzaj) == nullptr)
				return false;
		Filter*temp = new Filter[_trenutnoFiltera + 1];
		for (int i = 0; i <_trenutnoFiltera; i++)
			temp[i].Unos(_filteri[i]._sadrzaj, _filteri[i]._prioritet);
		temp[_trenutnoFiltera].Unos(sadrzaj, prioritet);
		_filteri = temp;
		_trenutnoFiltera++;
		return true;
	}
	bool IsPrintati(Dokument &dokument) {
		if (dokument._sadrzaj == nullptr)
			return false;
		if (dokument._vrsta != PDF && dokument._vrsta != DOC && dokument._vrsta != TXT && dokument._vrsta != HTML)
			return false;
		for (int i = 0; i < strlen(dokument._naziv); i++)
			if (dokument._naziv[i]<'a'&& dokument._naziv[i]>'z' || dokument._naziv[i]<'A'&& dokument._naziv[i]>'Z')
				return false;
		int brojac[3] = { 0 };
		for (int i = 0; i < _trenutnoFiltera; i++)
			brojac[_filteri[i]._prioritet]++;
		if (brojac[0] > 0 || brojac[1] > 2 || brojac[2] > 3)
			return false;
	}
	bool Printaj(Dokument &dokument) {
		bool printati = IsPrintati(dokument);
		if (!printati) {
			Dokument*temp = new Dokument[_trenutnoDokumenata + 1];
			for (int i = 0; i < _trenutnoDokumenata; i++)
				temp[i].Unos(_dokumenti[i]._vrsta, _dokumenti[i]._naziv, *_dokumenti[i]._kreiran);
			temp[_trenutnoDokumenata].Unos(dokument._vrsta, dokument._naziv, *dokument._kreiran);
			_dokumenti = temp;
			_trenutnoDokumenata++;
			return false;
		}
		for (int i = 0; i < strlen(dokument._sadrzaj); i++) {
			if (i%BROJ_ZNAKOVA_PO_STRANICI == 0)
				cout << crt;
			cout << dokument._sadrzaj[i];
		}
		return true;
	}
	float GetProsjecanBrojStranicaUPeriodu_Od_Do(DatumVrijeme OD, DatumVrijeme DO, int trenutnoDokumenata = 0, int ukupanBrojStranica = 0, int brojPrintanih = 0) {
		if (_trenutnoDokumenata == trenutnoDokumenata) {
			if (brojPrintanih == 0)
				return 0;
			return (float)ukupanBrojStranica / brojPrintanih;
		}
		if (IsPrintati(_dokumenti[trenutnoDokumenata]) == true && _dokumenti[trenutnoDokumenata]._kreiran->PretvoriDane() >= OD.PretvoriDane() && _dokumenti[_trenutnoDokumenata]._kreiran->PretvoriDane() <= DO.PretvoriDane())
			return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, trenutnoDokumenata + 1, ukupanBrojStranica + _dokumenti[trenutnoDokumenata]._brojStranica, brojPrintanih + _dokumenti[trenutnoDokumenata]._brojStranica);
		return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, trenutnoDokumenata + 1, ukupanBrojStranica + _dokumenti[trenutnoDokumenata]._brojStranica, brojPrintanih);
		return GetProsjecanBrojStranicaUPeriodu_Od_Do(OD, DO, trenutnoDokumenata + 1, ukupanBrojStranica, brojPrintanih);
	}
	Filter * GetNakoristenijiFilter() {
		Filter*temp = nullptr;
		int najcesce = 0;
		for (int i = 0; i < _trenutnoFiltera; i++)
		{
			int trenutno = 0;
			for (int j = 0; j < _trenutnoDokumenata; j++)
			{
				if (_filteri[i]._sadrzaj != nullptr && _dokumenti[j]._sadrzaj != nullptr && strstr(_filteri[i]._sadrzaj, _dokumenti[j]._sadrzaj) == nullptr)
					trenutno++;
			}
			if (trenutno > najcesce) {
				najcesce = trenutno;
				temp = &_filteri[i];
			}
		}
		return temp;
	}
	void Dealociraj() {
		delete[] _model; _model = nullptr;
		for (size_t i = 0; i < _trenutnoDokumenata; i++) {
			if (_dokumenti[i]._sadrzaj != nullptr) {
				_dokumenti[i].Dealociraj();
			}
		}
		delete[]_dokumenti; _dokumenti = nullptr;
		for (size_t i = 0; i < _trenutnoFiltera; i++)
			_filteri[i].Dealociraj();
		delete[]_filteri; _filteri = nullptr;
	}
	void Ispis() {
		cout << _model << crt;
		for (size_t i = 0; i < _trenutnoDokumenata; i++) {
			if (IsPrintati(_dokumenti[i]))
				_dokumenti[i].Ispis();
		}
	}
};


int main() {
	DatumVrijeme prije3Dana; prije3Dana.Unos(3, 2, 2018, 10, 15);
	DatumVrijeme danas1; danas1.Unos(6, 2, 2018, 10, 15);
	DatumVrijeme danas2; danas2.Unos(6, 2, 2018, 10, 16);
	DatumVrijeme za10Dana; za10Dana.Unos(16, 2, 2018, 10, 15);

	Dokument ispitPRII, ispitMAT, ispitUIT, ispitUITDrugiRok;
	ispitPRII.Unos(DOC, "ispitPRII.doc", prije3Dana);
	ispitMAT.Unos(DOC, "ispitMAT.doc", danas1);
	ispitUIT.Unos(DOC, "ispitUIT.doc", danas2);
	ispitUITDrugiRok.Unos(PDF, "ispitUITDrugiRok.pdf", za10Dana);


	ispitPRII.DodajSadrzaj("Programiranje ili racunarsko programiranje (engl. programming) jeste vjestina pomocu koje ");
	ispitPRII.DodajSadrzaj("korisnik stvara i izvrsava algoritme koristeci odredjene programske jezike da bi ... ");
	cout << "Broj stranica -> " << ispitPRII._brojStranica << endl;

	ispitPRII.Ispis();

	ispitMAT.DodajSadrzaj("Matematika se razvila iz potrebe da se obavljaju proracuni u trgovini, vrse mjerenja zemljista i predvidjaju ");
	ispitMAT.DodajSadrzaj("astronomski dogadjaji, i ove tri primjene se mogu dovesti u vezu sa grubom podjelom matematike ");

	Printer hp3200; hp3200.Unos("HP 3200");

	if (hp3200.DodajFilter("RE", NIZAK)) 
		cout << "Filter dodan!" << endl;
	if (hp3200.DodajFilter("RAT", VISOK))
		cout << "Filter dodan!" << endl;
	if (hp3200.DodajFilter("UBITI", VISOK))
		cout << "Filter dodan!" << endl;
	if (hp3200.DodajFilter("MRZITI", SREDNJI))
		cout << "Filter dodan!" << endl;
	if (!hp3200.DodajFilter("RE", SREDNJI))
		cout << "Filter nije dodan!" << endl;

	if (hp3200.Printaj(ispitPRII))
		cout << "Printam -> " << ispitPRII._naziv << endl;
	if (hp3200.Printaj(ispitMAT))
		cout << "Printam -> " << ispitMAT._naziv << endl;
	if (hp3200.Printaj(ispitUIT))
		cout << "Printam -> " << ispitUIT._naziv << endl;
	if (hp3200.Printaj(ispitUITDrugiRok))
		cout << "Printam -> " << ispitUITDrugiRok._naziv << endl;


	cout << "Prosjecan broj printanih stranica je -> " << hp3200.GetProsjecanBrojStranicaUPeriodu_Od_Do(prije3Dana, danas2) << crt;
	Filter * f = hp3200.GetNakoristenijiFilter();
	if (f != nullptr && f->_sadrzaj != nullptr)
		cout << "Najcesce koristeni sadrzaj filtera je -> " << f->_sadrzaj << crt;
	hp3200.Ispis();
	auto ZamijeniIPrintaj = [&hp3200](char razmak, char crtica, DatumVrijeme danas) {
		int brojac = 0;
		for (int i = 0; i < hp3200._trenutnoDokumenata; i++)
			if (hp3200._dokumenti[i]._sadrzaj != nullptr)
				for (int j = 0; j < strlen(hp3200._dokumenti[i]._sadrzaj); j++)
					if (hp3200._dokumenti[i]._sadrzaj[j] == razmak) {
						hp3200._dokumenti[i]._sadrzaj[j] == crtica;
						brojac++;
					}
		return brojac;
	};
	int zamijenjeno = ZamijeniIPrintaj(' ', '-', danas1);
	cout << "Zamijenjeno -> " << zamijenjeno << " znakova" << endl;
	hp3200.Ispis();

	prije3Dana.Dealociraj(); danas1.Dealociraj(); danas2.Dealociraj(); za10Dana.Dealociraj();
	//ispitMAT.Dealociraj(); ispitPRII.Dealociraj(); ispitUIT.Dealociraj(); ispitUITDrugiRok.Dealociraj();
	hp3200.Dealociraj();
	system("pause > 0");
	return 0;
}


