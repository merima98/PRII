#include<iostream>
#include<memory>
#include<fstream>
#include<tuple>
using namespace std;

#pragma warning(disable:4996)

const char *crt = "\n-------------------------------------------\n";

enum vrstaDokumenta { PDF, DOC, TXT, HTML };
const char * vrstaDokumentaChar[] = { "PDF", "DOC", "TXT", "HTML" };

enum vrstaAktivnosti { KREIRANJE, DODAVANJE, ZAMJENA, PRINTANJE };
const char * vrstaAktivnostiChar[] = { "KREIRANJE", "DODAVANJE", "ZAMJENA", "PRINTANJE" };

const int BROJ_ZNAKOVA_PO_STRANICI = 30;

struct DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
	void Unos(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 1, int minuti = 1) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}
	void Dealociraj() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	void Ispis() {
		cout << *_dan << "." << *_mjesec << "." << *_godina << " " << *_sati << ":" << *_minuti << endl;
	}
	int PretovoriDane() {
		return *_dan + *_mjesec * 30 + *_godina * 365 + *_sati * 24 + *_minuti * 360;
	}
};

char * AlocirajNizKaraktera(const char * sadrzaj) {
	int vel = strlen(sadrzaj) + 1;
	char * temp = new char[vel];
	strcpy_s(temp, vel, sadrzaj);
	return temp;
}

struct Modifikacija {
	char * _korisnicnkoIme;
	vrstaAktivnosti _aktivnost;
	DatumVrijeme _vrijemeModifikacije;
	void Unos(const char * korisnickoIme, vrstaAktivnosti aktivnost, DatumVrijeme vrijemeModifikacije) {
		_korisnicnkoIme = AlocirajNizKaraktera(korisnickoIme);
		_aktivnost = aktivnost;
		_vrijemeModifikacije.Unos(*vrijemeModifikacije._dan, *vrijemeModifikacije._mjesec, *vrijemeModifikacije._godina, *vrijemeModifikacije._dan, *vrijemeModifikacije._minuti);
	}
	void Dealociraj() {
		delete[] _korisnicnkoIme; _korisnicnkoIme = nullptr;
		_vrijemeModifikacije.Dealociraj();
	}
	void Ispis() { cout << _korisnicnkoIme << " (" << vrstaAktivnostiChar[_aktivnost] << ")"; _vrijemeModifikacije.Ispis(); }
};

struct Dokument {
	unique_ptr<vrstaDokumenta> _vrsta;
	char * _naziv;
	char * _sadrzaj;
	Modifikacija * _modifikacije;
	int _brojModifikacija;
	void Unos(vrstaDokumenta vrsta, const char * naziv, DatumVrijeme kreiran) {
		_naziv = AlocirajNizKaraktera(naziv);
		_vrsta = make_unique<vrstaDokumenta>(vrsta);
		_brojModifikacija = 0;
		_modifikacije = new Modifikacija[_brojModifikacija + 1];
		_modifikacije->Unos("", KREIRANJE, kreiran);
		_brojModifikacija++;
		_sadrzaj = nullptr;
	}
	void KopirajDokument(Dokument &d) {
		_vrsta = make_unique<vrstaDokumenta>(*d._vrsta);
		_naziv = AlocirajNizKaraktera(d._naziv);
		_sadrzaj = AlocirajNizKaraktera(d._sadrzaj);
		_modifikacije = new Modifikacija[d._brojModifikacija];
		for (int i = 0; i < d._brojModifikacija; i++)
			_modifikacije[i].Unos(d._modifikacije[i]._korisnicnkoIme, d._modifikacije[i]._aktivnost, d._modifikacije[i]._vrijemeModifikacije);
		_brojModifikacija = d._brojModifikacija;
	}
	void DodajSadrzaj(const char*sadrzaj, const char *username, DatumVrijeme datumVrijeme) {
		if (_sadrzaj == nullptr)
			_sadrzaj = AlocirajNizKaraktera(sadrzaj);
		else {
			int size = strlen(_sadrzaj) + strlen(sadrzaj) + 1;
			char*temp = new char[size];
			strcpy_s(temp, size, _sadrzaj);
			strcat_s(temp, size, sadrzaj);
			delete[]_sadrzaj;
			_sadrzaj = temp;
		}
		Modifikacija *temp = new Modifikacija[_brojModifikacija + 1];
		for (int i = 0; i < _brojModifikacija; i++)
			temp[i].Unos(_modifikacije[i]._korisnicnkoIme, _modifikacije[i]._aktivnost, _modifikacije[i]._vrijemeModifikacije);
		temp[_brojModifikacija].Unos(username, DODAVANJE, datumVrijeme);
		_modifikacije = temp;
		_brojModifikacija++;
	}
	void Dealociraj() {
		delete[] _naziv; _naziv = nullptr;
		delete[] _sadrzaj; _sadrzaj = nullptr;
		for (size_t i = 0; i < _brojModifikacija; i++)
			_modifikacije[i].Dealociraj();
		delete[] _modifikacije;
		_modifikacije = nullptr;
	}
	void Ispis() {
		cout << crt << _naziv << " " << vrstaDokumentaChar[*_vrsta] << " kreiran ";
		cout << crt << _sadrzaj << crt;
		for (size_t i = 0; i < _brojModifikacija; i++)
			_modifikacije[i].Ispis();
	}
};
struct Printer {
	char * _model;
	Dokument * _dokumenti;
	int _trenutnoDokumenata;

	void Unos(const char * model) {
		_model = AlocirajNizKaraktera(model);
		_dokumenti = nullptr;
		_trenutnoDokumenata = 0;
	}
	bool IsPrintari(Dokument &dokument) {
		if (dokument._sadrzaj == nullptr)
			return false;
		for (int i = 0; i < strlen(dokument._naziv); i++)
			if (dokument._naziv[i]<'a'&& dokument._naziv[i]>'z' || dokument._naziv[i]<'A'&& dokument._naziv[i]>'Z')
				return false;
		if (*dokument._vrsta != PDF && *dokument._vrsta != DOC && *dokument._vrsta != TXT && *dokument._vrsta != HTML)
			return false;
		int brojac[4] = { 0 };
		for (int i = 0; i < dokument._brojModifikacija; i++)
			brojac[dokument._modifikacije[i]._aktivnost]++;
		if (brojac[0] != 1 || brojac[1] < 1 || brojac[2] < 1)
			return false;
	}
	bool Printaj(Dokument &dokument, const char*username, DatumVrijeme datumVrijeme) {
		bool printati = IsPrintari(dokument);
		if (!printati)
			return false;
		for (int i = 0; i < strlen(dokument._sadrzaj); i++) {
			if (i%BROJ_ZNAKOVA_PO_STRANICI == 0)
				cout << crt;
			cout << dokument._sadrzaj[i];
		}
		Dokument*temp = new Dokument[_trenutnoDokumenata + 1];
		for (int i = 0; i < _trenutnoDokumenata; i++)
			temp[i].KopirajDokument(_dokumenti[i]);
		temp[_trenutnoDokumenata].KopirajDokument(dokument);
		_dokumenti = temp;
		_trenutnoDokumenata++;
		Modifikacija*pomocna = new Modifikacija[dokument._brojModifikacija + 1];
		for (int i = 0; i < dokument._brojModifikacija; i++)
			pomocna[i].Unos(dokument._modifikacije[i]._korisnicnkoIme, dokument._modifikacije[i]._aktivnost, dokument._modifikacije[i]._vrijemeModifikacije);
		pomocna[dokument._brojModifikacija].Unos(username, PRINTANJE, datumVrijeme);
		dokument._modifikacije = pomocna;
		dokument._brojModifikacija++;
		return true;
	}
	float GetProsjecanBrojModifikacijaByVrsta(vrstaAktivnosti dodavanje, int trenutnoDokumenata = 0, int brojPrintanih = 0, int odredjeneVrste = 0, int brojModifikacija = 0) {
		if (_trenutnoDokumenata == trenutnoDokumenata) {
			if (brojPrintanih == 0)return 0;
			return (float)odredjeneVrste / brojPrintanih;
		}
		if (_dokumenti[trenutnoDokumenata]._modifikacije[brojModifikacija]._aktivnost == dodavanje)
			return GetProsjecanBrojModifikacijaByVrsta(dodavanje, trenutnoDokumenata + 1, brojPrintanih, odredjeneVrste + 1, brojModifikacija + 1);
		if (_dokumenti[trenutnoDokumenata]._modifikacije[brojModifikacija]._aktivnost == PRINTANJE)
			return GetProsjecanBrojModifikacijaByVrsta(dodavanje, trenutnoDokumenata + 1, brojPrintanih + 1, odredjeneVrste, brojModifikacija + 1);
		return GetProsjecanBrojModifikacijaByVrsta(dodavanje, trenutnoDokumenata + 1, brojPrintanih, odredjeneVrste, brojModifikacija);
	}

	pair<Modifikacija*, int>GetModifikacijeByDatum(DatumVrijeme OD, DatumVrijeme DO) {
		Modifikacija*modifikaija = nullptr;
		int brojac = 0;
		for (int i = 0; i < _trenutnoDokumenata; i++)
			for (int j = 0; j < _dokumenti[i]._brojModifikacija; j++)
				if (_dokumenti[i]._modifikacije[j]._vrijemeModifikacije.PretovoriDane() > OD.PretovoriDane() && _dokumenti[i]._modifikacije[j]._vrijemeModifikacije.PretovoriDane() < DO.PretovoriDane())
					brojac++;
		if (brojac == 0)
			return pair<Modifikacija*, int>(nullptr, 0);
		modifikaija = new Modifikacija[brojac];
		brojac = 0;
		for (int i = 0; i < _trenutnoDokumenata; i++)
		{
			for (int j = 0; j < _dokumenti[i]._brojModifikacija; j++)
			{
				if (_dokumenti[i]._modifikacije[j]._vrijemeModifikacije.PretovoriDane() > OD.PretovoriDane() && _dokumenti[i]._modifikacije[j]._vrijemeModifikacije.PretovoriDane() < DO.PretovoriDane())
					modifikaija[brojac++].Unos(_dokumenti[i]._modifikacije[j]._korisnicnkoIme, _dokumenti[i]._modifikacije[j]._aktivnost, _dokumenti[i]._modifikacije[j]._vrijemeModifikacije);
			}
		}
		return pair<Modifikacija*, int>(modifikaija, brojac);
	}
	void Dealociraj() {
		delete[] _model; _model = nullptr;
		for (size_t i = 0; i < _trenutnoDokumenata; i++)
			_dokumenti[i].Dealociraj();
		delete[]_dokumenti; _dokumenti = nullptr;
	}
	void Ispis() {
		cout << _model << crt;
		for (size_t i = 0; i < _trenutnoDokumenata; i++)
			_dokumenti[i].Ispis();
	}
};


int main() {
	DatumVrijeme prije3Dana; prije3Dana.Unos(3, 2, 2018, 10, 15);
	DatumVrijeme danas1; danas1.Unos(6, 2, 2018, 10, 15);
	DatumVrijeme danas2; danas2.Unos(6, 2, 2018, 10, 16);
	DatumVrijeme za10Dana; za10Dana.Unos(16, 2, 2018, 10, 15);

	Dokument ispitPRII, ispitMAT, ispitUIT, ispitUITDrugiRok;
	ispitPRII.Unos(DOC, "ispitPRII.doc", prije3Dana);
	ispitMAT.Unos(DOC, "ispitMAT.doc", danas1);
	ispitUIT.Unos(DOC, "ispitUIT.doc", danas2);
	ispitUITDrugiRok.Unos(PDF, "ispitUITDrugiRok.pdf", za10Dana);

	ispitPRII.DodajSadrzaj("Programiranje ili racunarsko programiranje (engl. programming) jeste vjestina pomocu koje ", "denis.music", danas1);
	ispitPRII.DodajSadrzaj("korisnik stvara i izvrsava algoritme koristeci odredjene programske jezike da bi ... ", "indira.hamulic", danas2);

	ispitPRII.Ispis();

	ispitMAT.DodajSadrzaj("Matematika se razvila iz potrebe da se obavljaju proracuni u trgovini, vrse mjerenja zemljista i predvidjaju ", "jasmin.azemovic", danas1);
	ispitMAT.DodajSadrzaj("astronomski dogadjaji, i ove tri primjene se mogu dovesti u vezu sa grubom podjelom matematike ", "adel.handzic", danas2);

	Printer hp3200; hp3200.Unos("HP 3200");


	if (hp3200.Printaj(ispitPRII, "denis.music", za10Dana))
		cout << "Printam -> " << ispitPRII._naziv << endl;
	if (hp3200.Printaj(ispitMAT, "denis.music", za10Dana))
		cout << "Printam -> " << ispitMAT._naziv << endl;
	if (hp3200.Printaj(ispitUIT, "iris.memic", za10Dana))
		cout << "Printam -> " << ispitUIT._naziv << endl;
	if (hp3200.Printaj(ispitUITDrugiRok, "goran.skondric", za10Dana))
		cout << "Printam -> " << ispitUITDrugiRok._naziv << endl;

	cout << "Prosjecan broj modifikacija odrejdne vrste printanih dokumenata je -> " << hp3200.GetProsjecanBrojModifikacijaByVrsta(DODAVANJE) << crt;

	Modifikacija * pok = nullptr;
	int brojac = 0;

	tie(pok, brojac) = hp3200.GetModifikacijeByDatum(danas1, za10Dana);
	if (brojac > 0 && pok != nullptr)
		for (size_t i = 0; i < brojac; i++)
			pok[i].Ispis();

	hp3200.Ispis();
	auto Zamijeni = [&hp3200](char razmak, char crtica, const char*username, DatumVrijeme danas) {
		int brojac = 0;
		for (int i = 0; i <hp3200._trenutnoDokumenata; i++)
			for (int j = 0; j < hp3200._dokumenti[i]._brojModifikacija; j++)
				if (hp3200.IsPrintari(hp3200._dokumenti[i]) == true && hp3200._dokumenti[i]._modifikacije[j]._vrijemeModifikacije.PretovoriDane() == danas.PretovoriDane())
					for (int k = 0; k < strlen(hp3200._dokumenti[i]._sadrzaj); k++)
						if (hp3200._dokumenti[i]._sadrzaj[k] == razmak) {
							hp3200._dokumenti[i]._sadrzaj[k] = crtica;
							brojac++;
							Modifikacija*temp = new Modifikacija[hp3200._dokumenti[i]._brojModifikacija + 1];
							for (int l = 0; l < hp3200._dokumenti[i]._brojModifikacija; l++)
								temp[l].Unos(hp3200._dokumenti[i]._modifikacije[j]._korisnicnkoIme, hp3200._dokumenti[i]._modifikacije[j]._aktivnost, hp3200._dokumenti[i]._modifikacije[j]._vrijemeModifikacije);
							temp[hp3200._dokumenti[i]._brojModifikacija].Unos(username, ZAMJENA, danas);
							hp3200._dokumenti[i]._modifikacije = temp;
							hp3200._dokumenti[i]._brojModifikacija++;
						}
		return brojac;
	};
	int zamijenjeno = Zamijeni(' ', '-', "denis.music", danas1);
	cout << "Zamijenjeno -> " << zamijenjeno << " znakova" << endl;
	hp3200.Ispis();

	prije3Dana.Dealociraj(); danas1.Dealociraj(); danas2.Dealociraj(); za10Dana.Dealociraj();
	ispitMAT.Dealociraj(); ispitPRII.Dealociraj(); ispitUIT.Dealociraj(); ispitUITDrugiRok.Dealociraj();

	hp3200.Dealociraj();

	system("pause > 0");
	return 0;
}

