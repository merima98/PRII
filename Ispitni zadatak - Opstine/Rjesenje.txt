#include<iostream>
#include<memory>
#include<fstream>
#include<tuple>
#include<functional>
using namespace std;
#pragma warning(disable:4996)
enum Opstina { Opstina1, Opstina2, Opstina3, Opstina4 };
const char * OpstineChar[] = { "Opstina1", "Opstina2", "Opstina3", "Opstina4" };
enum Kandidati { Kandidat1, Kandidat2, Kandidat3, Kandidat4 };
const char * KandidatiChar[] = { "Kandidat1", "Kandidat2", "Kandidat3", "Kandidat4" };

struct Datum {
	int _dan, _mjesec, _godina;
	void Unos(int d, int m, int g) { _dan = d; _mjesec = m; _godina = g; }
	void Ispis() { cout << _dan << "/" << _mjesec << "/" << _godina << endl; }
	bool Puniljetan() {
		if (_godina < 2018)
			return true;
		if (_godina == 2018 && _mjesec < 8)
			return true;
		return false;
	}
	int PretvoriDane() {
		return _dan + _mjesec * 30 + _godina * 365;
	}
};
struct BrojanjeGlasova
{
	Kandidati kandidat;
	int doSadaGlasova = 0;
	void Unos(Kandidati k) {
		kandidat = k;
	}
};
struct Osoba {
	Datum _datumRodjenja;
	char * _imePrezime;
	char _JMBG[14];
	Opstina _Prebivaliste;
	void unos(Datum d, const char * ip, const  char jmbg[], Opstina p) {
		_datumRodjenja = d;
		_imePrezime = new char[strlen(ip) + 1];
		strcpy_s(_imePrezime, strlen(ip) + 1, ip);
		strcpy_s(_JMBG, 14, jmbg);
		_Prebivaliste = p;
	}
	void Dealociraj() { delete[] _imePrezime; _imePrezime = nullptr; }
	void Info() {
		_datumRodjenja.Ispis();
		cout << _imePrezime << " " << _JMBG << " " <<
			OpstineChar[_Prebivaliste] << endl;
	}
};
struct Glas {
	Osoba * _glasac;
	Kandidati * _glasZa;
	void Unos(Osoba o, Kandidati k) {
		_glasac = new Osoba;
		_glasac->unos(o._datumRodjenja, o._imePrezime, o._JMBG, o._Prebivaliste);
		_glasZa = new Kandidati(k);
	}
	void Ispis() {
		_glasac->Info();
		cout << KandidatiChar[*_glasZa] << endl;
	}
	void Dealociraj() { _glasac->Dealociraj(); }
};
struct Izbori2016 {
	Opstina * _glasackoMjesto;
	Glas * _glasovi[1000];
	int _doSadaGlasalo;

	void Unos(Opstina opstina) {
		_glasackoMjesto = new Opstina(opstina);
		for (int i = 0; i < 1000; i++)
			_glasovi[i] = nullptr;
		_doSadaGlasalo = 0;
	}
	void DodajGlas(Glas glas) {
		for (int i = 0; i < _doSadaGlasalo; i++)
			if (strcmp(_glasovi[i]->_glasac->_JMBG, glas._glasac->_JMBG) == 0)
				return;
		if (glas._glasac->_Prebivaliste != *_glasackoMjesto)
			return;
		if (glas._glasac->_datumRodjenja.Puniljetan() == false)
			return;
		_glasovi[_doSadaGlasalo] = new Glas;
		_glasovi[_doSadaGlasalo]->Unos(*glas._glasac, *glas._glasZa);
		_doSadaGlasalo++;
	}

	void Ispis() {
		BrojanjeGlasova glasKandidata[4];
		glasKandidata[0].Unos(Kandidat1);
		glasKandidata[1].Unos(Kandidat2);
		glasKandidata[2].Unos(Kandidat3);
		glasKandidata[3].Unos(Kandidat4);
		for (int i = 0; i < _doSadaGlasalo; i++) {
			if (*_glasovi[i]->_glasZa == Kandidat1)
				glasKandidata[0].doSadaGlasova++;
			if (*_glasovi[i]->_glasZa == Kandidat2)
				glasKandidata[1].doSadaGlasova++;
			if (*_glasovi[i]->_glasZa == Kandidat3)
				glasKandidata[2].doSadaGlasova++;
			if (*_glasovi[i]->_glasZa == Kandidat4)
				glasKandidata[3].doSadaGlasova++;
		}
		for (int i = 0; i < 4 - 1; i++)
			for (int j = i + 1; j < 4; j++)
				if (glasKandidata[i].doSadaGlasova < glasKandidata[j].doSadaGlasova) {
					BrojanjeGlasova temp;
					temp = glasKandidata[i];
					glasKandidata[i] = glasKandidata[j];
					glasKandidata[j] = temp;
				}
		for (int i = 0; i < 4; i++)
			cout << KandidatiChar[glasKandidata[i].kandidat] << " :::BROJ GLASOVA:::" << glasKandidata[i].doSadaGlasova << " :::U PROCENTIMA::: " << (float)glasKandidata[i].doSadaGlasova / 100 << "%" << endl;
	}
	
	int BrojGlasacaPoRodjenju(Datum OD, Datum DO) {
		int brojac = 0;
		for (int i = 0; i < _doSadaGlasalo; i++)
			if (_glasovi[i]->_glasac->_datumRodjenja.PretvoriDane() > OD.PretvoriDane() && _glasovi[i]->_glasac->_datumRodjenja.PretvoriDane() < DO.PretvoriDane())
				brojac++;
		return brojac;
	}
};

int PretragaRekurzivno(Kandidati kandidat, Izbori2016 izbori, int trenutnoGlasova = 0, int brojac = 0) {
	if (trenutnoGlasova == izbori._doSadaGlasalo)
		return brojac;
	if (*izbori._glasovi[trenutnoGlasova]->_glasZa == kandidat)
		return PretragaRekurzivno(kandidat, izbori, trenutnoGlasova + 1, brojac + 1);
	return PretragaRekurzivno(kandidat, izbori, trenutnoGlasova + 1, brojac);
}
void UpisiUBinarniFajl(Izbori2016 &izbori) {
	char naziv[100];
	strcpy_s(naziv, 100, OpstineChar[*izbori._glasackoMjesto]);
	ofstream upis(naziv, ios::binary);
	if (!upis.fail()) {
		upis.write((char*)&izbori, sizeof(izbori));
	}
	upis.close();
}
void UcitajIzBinarnogFajla(Izbori2016&izbori, const char*naziv) {
	ifstream ispis(naziv, ios::binary);
	if (!ispis.fail()) {
		ispis.read((char*)&izbori, sizeof(izbori));
	}
	ispis.close();
}
void main() {
	Datum datumGlasac1, datumGlasac2, datumGlasac3, datumGlasac4, datumIzbora;
	datumIzbora.Unos(14, 7, 2016);
	datumGlasac1.Unos(18, 5, 1990);
	datumGlasac2.Unos(5, 3, 1982);
	datumGlasac3.Unos(12, 8, 1958);
	datumGlasac4.Unos(22, 6, 2000);

	Osoba a, b, c, d, e;
	a.unos(datumGlasac1, "Denis Music", "1111111111111", Opstina1);
	b.unos(datumGlasac2, "Jasmin Azemovic", "1111111111112", Opstina1);
	c.unos(datumGlasac3, "Indira Hamulic", "1111111111113", Opstina1);
	d.unos(datumGlasac4, "Adel Handzic", "1111111111114", Opstina2);
	e.unos(datumGlasac4, "Zanin Vejzovic", "1111111111115", Opstina1);


	Glas g1, g2, g3, g4, g5;
	g1.Unos(a, Kandidat1);
	g2.Unos(b, Kandidat1);
	g3.Unos(c, Kandidat2);
	g4.Unos(d, Kandidat1);
	g5.Unos(e, Kandidat2);

	Izbori2016 izbori, izbori_FromFile;
	izbori.Unos(Opstina1);

	izbori.DodajGlas(g1);
	izbori.DodajGlas(g2);
	izbori.DodajGlas(g3);
	izbori.DodajGlas(g4);
	izbori.DodajGlas(g5);
	izbori.Ispis();

	Datum OD, DO;
	OD.Unos(17, 7, 1998);
	DO.Unos(17, 7, 1986);
	cout << "Glasaca u starost od 18 - 30 godina->" << izbori.BrojGlasacaPoRodjenju(OD, DO) << endl;
	cout << "Broj glasova za Kandidat1-> " << PretragaRekurzivno(Kandidat1, izbori) << endl;
	UpisiUBinarniFajl(izbori);
	UcitajIzBinarnogFajla(izbori_FromFile, "Opstina1");
	izbori_FromFile.Ispis();

	system("pause > 0");
}

