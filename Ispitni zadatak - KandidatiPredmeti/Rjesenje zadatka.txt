#include <iostream>
#include<memory>
#include<fstream>
#include<tuple>
using namespace std;
#pragma warning(disable:4996)

const char *crt = "\n-------------------------------------------\n";

enum eNacinStudiranja { REDOVAN, DL };
const char*NacinStudiranjaChar[] = { "Redovan","DL" };
enum eRazred { PRVI = 1, DRUGI, TRECI, CETVRTI };
const char*RactredChar[] = { "Prvi", "Drugi","Treci","Cetvrti" };


struct DatumVrijeme {
	int *_dan, *_mjesec, *_godina, *_sati, *_minuti;
	void Unos(int dan = 1, int mjesec = 1, int godina = 2000, int sati = 0, int minuti = 0) {
		_dan = new int(dan);
		_mjesec = new int(mjesec);
		_godina = new int(godina);
		_sati = new int(sati);
		_minuti = new int(minuti);
	}
	char*GetDatumKaoNizKaraktera() {
		char dan[3], mjesec[3], godina[5], sati[3], minute[3];
		_itoa_s(*_dan, dan, 3, 10);
		_itoa_s(*_mjesec, mjesec, 3, 10);
		_itoa_s(*_godina, godina, 5, 10);
		_itoa_s(*_sati, sati, 3, 10);
		_itoa_s(*_minuti, minute, 3, 10);
		int size = strlen(dan) + strlen(mjesec) + strlen(godina) + strlen(minute) + strlen(sati) + 5;
		char*vratiti = new char[size];
		strcpy_s(vratiti, size, dan);
		strcat_s(vratiti, size, ".");
		strcat_s(vratiti, size, mjesec);
		strcat_s(vratiti, size, ".");
		strcat_s(vratiti, size, godina);
		strcat_s(vratiti, size, " ");
		strcat_s(vratiti, size, sati);
		strcat_s(vratiti, size, ":");
		strcat_s(vratiti, size, minute);
		return vratiti;
	}
	void Dealociraj() {
		delete _dan; _dan = nullptr;
		delete _mjesec; _mjesec = nullptr;
		delete _godina; _godina = nullptr;
		delete _sati; _sati = nullptr;
		delete _minuti; _minuti = nullptr;
	}
	void Ispis() {
		cout << *_dan << "." << *_mjesec << "." << *_godina << " " << *_sati << ":" << *_minuti << endl;
	}
	bool DatumRok(DatumVrijeme datum) {
		if (*_godina < *datum._godina)
			return true;
		if (*_godina == *datum._godina && *_mjesec < *datum._godina)
			return true;
		if (*_godina == *datum._godina && *_mjesec == *datum._mjesec && *_dan < *datum._dan)
			return true;
		if (*_godina == *datum._godina && *_mjesec == *datum._mjesec && *_dan == *datum._dan && *_sati < *datum._sati)
			return true;
		if (*_godina == *datum._godina && *_mjesec == *datum._mjesec && *_dan == *datum._dan && *_sati == *datum._sati && *_minuti < *datum._minuti)
			return true;
		return false;
	}
};

const DatumVrijeme rokZaPrijavu = { new int(5), new int(7), new int(2017), new int(12), new int(30) };


struct Predmet {
	char * _naziv;
	int _ocjena;
	DatumVrijeme * _datumUnosa;
	void Unos(const char * naziv, int ocjena, DatumVrijeme datumUnosa) {
		int vel = strlen(naziv) + 1;
		_naziv = new char[vel];
		strcpy_s(_naziv, vel, naziv);
		_ocjena = ocjena;
		_datumUnosa = new DatumVrijeme;
		_datumUnosa->Unos(*datumUnosa._dan, *datumUnosa._mjesec, *datumUnosa._godina, *datumUnosa._sati, *datumUnosa._minuti);
	}
	void Dealociraj() {
		delete[] _naziv; _naziv = nullptr;
		_datumUnosa->Dealociraj(); delete _datumUnosa;
	}

	void Ispis() {
		if (_naziv != nullptr && _datumUnosa != nullptr)
			cout << _naziv << " (" << _ocjena << ") " << _datumUnosa->GetDatumKaoNizKaraktera() << endl;
	}
};

struct Uspjeh {
	eRazred _razred;
	Predmet * _predmeti;
	int _brojPredmeta;
	void Unos(eRazred razred) {
		_razred = razred;
		_predmeti = nullptr;
		_brojPredmeta = 0;
	}
	void DodajPredmet(Predmet predmet) {
		Predmet*temp = new Predmet[_brojPredmeta + 1];
		for (int i = 0; i < _brojPredmeta; i++)
			temp[i].Unos(_predmeti[i]._naziv, _predmeti[i]._ocjena, *_predmeti[i]._datumUnosa);
		temp[_brojPredmeta].Unos(predmet._naziv, predmet._ocjena, *predmet._datumUnosa);
		_predmeti = temp;
		_brojPredmeta++;
	}
	void Dealociraj() {
		for (size_t i = 0; i < _brojPredmeta; i++)
			_predmeti[i].Dealociraj();
		delete[] _predmeti; _predmeti = nullptr;
	}

	void Ispis() {
		cout << crt << "Razred -> " << RactredChar[_razred] << crt;
		for (size_t i = 0; i < _brojPredmeta; i++) {
			_predmeti[i].Ispis();
		}
	}
};

struct Kandidat {
	eNacinStudiranja _nacinStudiranja;
	char * _imePrezime;
	shared_ptr<Uspjeh> _uspjeh[4];

	void Unos(eNacinStudiranja nacinStudiranja, const char * imePrezime) {
		int vel = strlen(imePrezime) + 1;
		_imePrezime = new char[vel];
		strcpy_s(_imePrezime, vel, imePrezime);
		_nacinStudiranja = nacinStudiranja;
		for (size_t i = 0; i < 4; i++)
			_uspjeh[i] = nullptr;
	}
	bool DodajPredmet(eRazred razred, Predmet predmet) {

		if (razred != PRVI && razred != DRUGI && razred != TRECI && razred != CETVRTI)
			return false;
		for (int i = 0; i < 4; i++)
			if (_uspjeh[i] != nullptr)
				for (int j = 0; j < _uspjeh[i]->_brojPredmeta; j++)
					if (_uspjeh[i]->_predmeti[j]._naziv != nullptr && strcmp(_uspjeh[i]->_predmeti[j]._naziv, predmet._naziv) == 0)
						return false;
		if (predmet._datumUnosa->DatumRok(rokZaPrijavu) == false)
			return false;
		_uspjeh[(int)razred - 1] = make_shared<Uspjeh>();
		_uspjeh[(int)razred - 1]->DodajPredmet(predmet);
		return true;

	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < 4; i++) {
			if (_uspjeh[i] != nullptr)
				_uspjeh[i]->Dealociraj();
		}
	}
	void Ispis() {
		cout << crt << _imePrezime << " " << _nacinStudiranja;
		for (size_t i = 0; i < 4; i++) {
			if (_uspjeh[i] != nullptr)
				_uspjeh[i]->Ispis();
		}
	}
};
Kandidat* rekNajboljaOcjena(Kandidat *prijave, int brojKandidata, const char*predmet, Kandidat *nabolji = nullptr, int najvecaOcjena = 0) {
	if (brojKandidata - 1 < 0)
		return nabolji;
	for (int i = 0; i < 4; i++)
		if (prijave[brojKandidata - 1]._uspjeh[i] != nullptr)
			for (int j = 0; j < prijave[brojKandidata - 1]._uspjeh[i]->_brojPredmeta; j++)
				if (prijave[brojKandidata - 1]._uspjeh[i]->_predmeti[j]._ocjena > najvecaOcjena   && prijave[brojKandidata - 1]._uspjeh[i]->_predmeti[j]._naziv != nullptr && strcmp(prijave[brojKandidata - 1]._uspjeh[i]->_predmeti[j]._naziv, predmet) == 0)
					return rekNajboljaOcjena(prijave, brojKandidata - 1, predmet, &prijave[brojKandidata - 1], prijave[brojKandidata - 1]._uspjeh[i]->_predmeti[j]._ocjena);
	return rekNajboljaOcjena(prijave, brojKandidata - 1, predmet, nabolji, najvecaOcjena);
}
void main()
{
	DatumVrijeme datum19062017_1015, datum20062017_1115, datum30062017_1215, datum05072017_1231;
	datum19062017_1015.Unos(19, 6, 2017, 10, 15);
	datum20062017_1115.Unos(20, 6, 2017, 11, 15);
	datum30062017_1215.Unos(30, 6, 2017, 12, 15);
	datum05072017_1231.Unos(5, 7, 2017, 12, 31);

	cout << datum19062017_1015.GetDatumKaoNizKaraktera() << endl;

	Predmet Matematika, Fizika, Hemija, Engleski;
	Matematika.Unos("Matematika", 2, datum19062017_1015);
	Fizika.Unos("Fizika", 5, datum20062017_1115);
	Hemija.Unos("Hemija", 2, datum20062017_1115);
	Engleski.Unos("Engleski", 5, datum05072017_1231);

	int brojKandidata = 2;

	Kandidat * prijave2017 = new Kandidat[brojKandidata];
	prijave2017[0].Unos(DL, "Jasmin Azemovic");
	prijave2017[1].Unos(REDOVAN, "Indira Hamulic");

	if (prijave2017[0].DodajPredmet(DRUGI, Engleski))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(DRUGI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(PRVI, Fizika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[0].DodajPredmet(PRVI, Hemija))
		cout << "Predmet uspjesno dodan!" << crt;

	Matematika._ocjena = 5;
	Hemija._ocjena = 3;

	if (prijave2017[1].DodajPredmet(PRVI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(PRVI, Matematika))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(TRECI, Hemija))
		cout << "Predmet uspjesno dodan!" << crt;
	if (prijave2017[1].DodajPredmet(DRUGI, Engleski))
		cout << "Predmet uspjesno dodan!" << crt;

	auto najboljiUspjeh = [&prijave2017]() {
		shared_ptr<Uspjeh>theBest = nullptr;
		float prosjek = 0;
		for (int i = 0; i < 4; i++){
			if (prijave2017->_uspjeh[i] != nullptr) {
				float trenutno = 0;
				for (int j = 0; j < prijave2017->_uspjeh[i]->_brojPredmeta; j++)
					trenutno += prijave2017->_uspjeh[i]->_predmeti[j]._ocjena;
				trenutno /= prijave2017->_uspjeh[i]->_brojPredmeta;
				if (trenutno > prosjek) {
					prosjek = trenutno;
					theBest = prijave2017->_uspjeh[i];
				}
			}
		}
		return theBest;
	};
	shared_ptr<Uspjeh> najbolji = najboljiUspjeh();
	najbolji->Ispis();

	Kandidat * kandidatSaNajboljomOcjenom = rekNajboljaOcjena(prijave2017, brojKandidata, "Matematika");

	for (size_t i = 0; i < brojKandidata; i++){
		prijave2017[i].Ispis();
		prijave2017[i].Dealociraj();
	}
	delete[] prijave2017;
	prijave2017 = nullptr;

	system("pause>0");
}