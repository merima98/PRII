#include<iostream>
#include<memory>
#include<fstream>
#include<tuple>
#include<functional>
using namespace std;
#pragma warning(disable:4996)

enum VrstaAktivnosti { Tehnike, Kata, Borba };
const char*AktivnostiChar[] = { "Tehnike","Kata","Borba" };
enum Pojas { Zuti, Narandzasti, Zeleni, Plavi, Smedji, Crni };
const char*PojasChar[] = { "Zuti","Narandzasti","Zeleni", "Plavi", "Smedji","Crni" };
struct Datum {
	int * _dan, *_mjesec, *_godina;
	void Unos(int d, int m, int g) {
		_dan = new int(d);
		_mjesec = new int(m);
		_godina = new int(g);
	}
	void Ispis() { cout << *_dan << "/" << *_mjesec << "/" << *_godina << endl; }
	void Dealociraj() { delete _dan; delete _mjesec; delete _godina; }
	int PretvoriDane() {
		return*_dan + *_mjesec * 30 + *_godina * 365;
	}
};
struct Aktivnost {
	unique_ptr<VrstaAktivnosti> _vrsta;
	Datum _datumIzvrsenja;
	char * _nazivOpis;
	int _ocjena;
	void Unos(VrstaAktivnosti vrsta, Datum * datum, int ocjena, const char * nazivOpis) {
		_datumIzvrsenja.Unos(*datum->_dan, *datum->_mjesec, *datum->_godina);
		_ocjena = ocjena;
		int size = strlen(nazivOpis) + 1;
		_nazivOpis = new char[size];
		strcpy_s(_nazivOpis, size, nazivOpis);
		_vrsta = make_unique<VrstaAktivnosti>(vrsta); 
	}
	void Ispis() {
		cout << AktivnostiChar[*_vrsta] << " " << _ocjena << " " << _nazivOpis << " ";
		_datumIzvrsenja.Ispis();
		cout << endl;
	}
	void Dealociraj() {
		_datumIzvrsenja.Dealociraj();
		delete[] _nazivOpis; _nazivOpis = nullptr;
	}
};
struct KaratePojas {
	Datum * _datumPolaganja;
	Pojas _pojas;
	Aktivnost * _listaIzvrsenihAktivnosti;
	int _trenutnoIzvrsenihAktivnosti;
	void Unos(Pojas pojas) {
		_listaIzvrsenihAktivnosti = nullptr;
		_trenutnoIzvrsenihAktivnosti = 0;
		_datumPolaganja = nullptr;
		_pojas = pojas;
	}
	void DodajPojas(KaratePojas pojas) {
		_pojas = pojas._pojas;
		_listaIzvrsenihAktivnosti = new Aktivnost[pojas._trenutnoIzvrsenihAktivnosti];
		for (int i = 0; i < pojas._trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Unos(*pojas._listaIzvrsenihAktivnosti[i]._vrsta, &pojas._listaIzvrsenihAktivnosti[i]._datumIzvrsenja, pojas._listaIzvrsenihAktivnosti[i]._ocjena, pojas._listaIzvrsenihAktivnosti[i]._nazivOpis);
		_trenutnoIzvrsenihAktivnosti = pojas._trenutnoIzvrsenihAktivnosti;
		if (pojas._datumPolaganja != nullptr)
			DaLiJePolozen();
	}
	bool DodajIzvrsenuAktivnost(Aktivnost* aktivnost) {
		for (int i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			if (_listaIzvrsenihAktivnosti[i]._vrsta == aktivnost->_vrsta && _listaIzvrsenihAktivnosti[i]._datumIzvrsenja.PretvoriDane() == aktivnost->_datumIzvrsenja.PretvoriDane() && _listaIzvrsenihAktivnosti[i]._ocjena > 5)
				return false;
		Aktivnost*temp = new Aktivnost[_trenutnoIzvrsenihAktivnosti + 1];
		for (int i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			temp[i].Unos(*_listaIzvrsenihAktivnosti[i]._vrsta, &_listaIzvrsenihAktivnosti[i]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i]._ocjena, _listaIzvrsenihAktivnosti[i]._nazivOpis);
		temp[_trenutnoIzvrsenihAktivnosti].Unos(*aktivnost->_vrsta, &aktivnost->_datumIzvrsenja, aktivnost->_ocjena, aktivnost->_nazivOpis);
		_listaIzvrsenihAktivnosti = temp;
		_trenutnoIzvrsenihAktivnosti++;
		return true;
	}
	void Sortiraj() {
		for (int i = 0; i < _trenutnoIzvrsenihAktivnosti - 1; i++)
			for (int j = i + 1; j < _trenutnoIzvrsenihAktivnosti; j++)
				if (_listaIzvrsenihAktivnosti[i]._ocjena > _listaIzvrsenihAktivnosti[j]._ocjena) {
					Aktivnost temp;
					temp.Unos(*_listaIzvrsenihAktivnosti[i]._vrsta, &_listaIzvrsenihAktivnosti[i]._datumIzvrsenja, _listaIzvrsenihAktivnosti[i]._ocjena, _listaIzvrsenihAktivnosti[i]._nazivOpis);
					_listaIzvrsenihAktivnosti[i].Dealociraj();
					_listaIzvrsenihAktivnosti[i].Unos(*_listaIzvrsenihAktivnosti[j]._vrsta, &_listaIzvrsenihAktivnosti[j]._datumIzvrsenja, _listaIzvrsenihAktivnosti[j]._ocjena, _listaIzvrsenihAktivnosti[j]._nazivOpis);
					_listaIzvrsenihAktivnosti[j].Dealociraj();
					_listaIzvrsenihAktivnosti[j].Unos(*temp._vrsta, &temp._datumIzvrsenja, temp._ocjena, temp._nazivOpis);
					temp.Dealociraj();
				}
	}
	bool DaLiJePolozen() {
		int brojacPozitivnih[3] = { 0 };
		int brojacNegativnih[3] = { 0 };
		Datum datum; 
		for (int i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
		{
			if (_listaIzvrsenihAktivnosti[i]._ocjena > 5) {
				brojacPozitivnih[*_listaIzvrsenihAktivnosti[i]._vrsta]++;
				datum.Unos(*_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._dan, *_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._mjesec, *_listaIzvrsenihAktivnosti[i]._datumIzvrsenja._godina);
			}
			if (_listaIzvrsenihAktivnosti[i]._ocjena < 6)
				brojacNegativnih[*_listaIzvrsenihAktivnosti[i]._vrsta]++;
		}
		for (int i = 0; i < 3; i++)
			if (brojacNegativnih[i] > 3 || brojacPozitivnih[i] < (int)_pojas + 1)
				return false;
		_datumPolaganja = new Datum;
		_datumPolaganja->Unos(*datum._dan, *datum._mjesec, *datum._godina);
		return true;
	}

	float PretragaRekrzivno(const char*pojas, int trenutnoAktivnosti = 0, float prosjek = 0, int brojac = 0) {
		if (trenutnoAktivnosti == _trenutnoIzvrsenihAktivnosti) {
			if (brojac == 0)return 0;
			return (float)prosjek / brojac;
		}
		if (_listaIzvrsenihAktivnosti[trenutnoAktivnosti]._ocjena > 5 && _listaIzvrsenihAktivnosti[trenutnoAktivnosti]._nazivOpis != nullptr && strstr(_listaIzvrsenihAktivnosti[trenutnoAktivnosti]._nazivOpis, pojas) == nullptr)
			return PretragaRekrzivno(pojas, trenutnoAktivnosti + 1, prosjek + _listaIzvrsenihAktivnosti[trenutnoAktivnosti]._ocjena, brojac + 1);
		return PretragaRekrzivno(pojas, trenutnoAktivnosti + 1, prosjek, brojac);
	}
	void Dealociraj() {
		if (_datumPolaganja != nullptr) {
			_datumPolaganja->Dealociraj(); _datumPolaganja = nullptr;
		}
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Dealociraj();
		delete[] _listaIzvrsenihAktivnosti;
		_listaIzvrsenihAktivnosti = nullptr;
	}
	void Ispis() {
		_datumPolaganja->Ispis();
		cout << PojasChar[_pojas] << endl;
		for (size_t i = 0; i < _trenutnoIzvrsenihAktivnosti; i++)
			_listaIzvrsenihAktivnosti[i].Ispis();
	}
};

struct Kandidat {
	char * _imePrezime;
	shared_ptr<KaratePojas> _pojasevi[6];
	void Unos(const char * imePrezime) {
		int size = strlen(imePrezime) + 1;
		_imePrezime = new char[size];
		strcpy_s(_imePrezime, size, imePrezime);
		for (size_t i = 0; i < 6; i++)
			_pojasevi[i] = nullptr;
	}
	bool DodajPojas(KaratePojas pojas) {
		auto lokacija = [this, pojas]() {
			for (int i = 0; i < 6; i++)
			{
				if (_pojasevi[i] == nullptr) {
					if (i == pojas._pojas)
						return i;
					return -1;
				}
			}
			return -1;
		};
		int pozicija = lokacija();
		if (pozicija == -1)
			return false;
		_pojasevi[pozicija] = make_shared<KaratePojas>();
		_pojasevi[pozicija]->DodajPojas(pojas);
		return true;
	}
	pair<Pojas, float> GetNajbolji() {
		Pojas p; float najbolji = 0;
		for (int i = 0; i < 6; i++)
		{
			if (_pojasevi[i] != nullptr) {
				float trenutno = 0; int brojacUspjesnih = 0;
				for (int j = 0; j < _pojasevi[i]->_trenutnoIzvrsenihAktivnosti; j++)
					if (_pojasevi[i]->_listaIzvrsenihAktivnosti[j]._ocjena > 5) {
						trenutno += _pojasevi[i]->_listaIzvrsenihAktivnosti[j]._ocjena;
						brojacUspjesnih++;
					}
				trenutno /= brojacUspjesnih;
				if (trenutno > najbolji) {
					najbolji = trenutno;
					p = _pojasevi[i]->_pojas;
				}
			}
		}
		return pair<Pojas, float>(p, najbolji);
	}
	void Dealociraj() {
		delete[] _imePrezime; _imePrezime = nullptr;
		for (size_t i = 0; i < 6; i++)
			if (_pojasevi[i] != nullptr) {
				_pojasevi[i]->Dealociraj();
				_pojasevi[i].reset();
			}
	}
	void Ispis() {
		cout << _imePrezime << endl;
		for (size_t i = 0; i < 6; i++)
			if (_pojasevi[i] != nullptr)
				_pojasevi[i]->Ispis();
	}
};

void main() {

	Datum datumPolaganja1, datumPolaganja2, datumPolaganja3, datumPolaganja4;
	datumPolaganja1.Unos(10, 6, 2018);
	datumPolaganja2.Unos(18, 6, 2018);
	datumPolaganja3.Unos(22, 3, 2018);
	datumPolaganja4.Unos(22, 7, 2018);

	Aktivnost aktivnost1, aktivnost2, aktivnost3, aktivnost4, aktivnost5;
	aktivnost1.Unos(Tehnike, &datumPolaganja1, 6, "Tehnike za zuti pojas");
	aktivnost2.Unos(Kata, &datumPolaganja1, 8, "Taiki joko shodan - zuti pojas");
	aktivnost3.Unos(Borba, &datumPolaganja1, 2, "Jednostavne borbene tehnike sa partnerom");
	aktivnost4.Unos(Borba, &datumPolaganja1, 6, "Jednostavne borbene tehnike sa partnerom");
	aktivnost5.Unos(Borba, &datumPolaganja4, 6, "Jednostavne borbene tehnike sa partnerom");

	KaratePojas pojasZuti, pojasNarandzasti, pojasZeleni;
	pojasZuti.Unos(Zuti);
	pojasNarandzasti.Unos(Narandzasti); pojasZeleni.Unos(Zeleni);


	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost1))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost2))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost3))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost4))
		cout << "Aktivnost uspjesno dodana!" << endl;
	if (pojasZuti.DodajIzvrsenuAktivnost(&aktivnost5))
		cout << "Aktivnost uspjesno dodana!" << endl;

	pojasZuti.Sortiraj();

	if (pojasZuti.DaLiJePolozen())
		pojasZuti.Ispis();

	cout << "Prosjecna ocjena za zuti pojas -> " << pojasZuti.PretragaRekrzivno("pojas") << endl;

	pojasZuti.Ispis();

	Kandidat jasmin;
	jasmin.Unos("Jasmin Azemovic");

	if (jasmin.DodajPojas(pojasZuti))
		cout << "Pojas uspjesno dodan!" << endl;
	if (jasmin.DodajPojas(pojasZeleni))
		cout << "Pojas uspjesno dodan!" << endl;
	if (jasmin.DodajPojas(pojasNarandzasti))
		cout << "Pojas uspjesno dodan!" << endl;

	float prosjek = 0;
	Pojas pojas;

	tie(pojas, prosjek) = jasmin.GetNajbolji();
	cout << "Najbolji rezultat od " << prosjek << " je ostvaren tokom stjecanja pojasa " << PojasChar[pojas] << endl;


	datumPolaganja1.Dealociraj(), datumPolaganja2.Dealociraj(), datumPolaganja3.Dealociraj(), datumPolaganja4.Dealociraj();
	aktivnost1.Dealociraj(), aktivnost2.Dealociraj(), aktivnost3.Dealociraj(), aktivnost4.Dealociraj(), aktivnost5.Dealociraj();
	pojasZuti.Dealociraj(), pojasNarandzasti.Dealociraj(), pojasZeleni.Dealociraj();
	jasmin.Dealociraj();

	system("pause");
}


